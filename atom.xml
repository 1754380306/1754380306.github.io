<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>琦煜老师的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-17T02:19:59.923Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Instructional-Technology2</title>
    <link href="http://example.com/2023/05/17/Instructional-Technology2/"/>
    <id>http://example.com/2023/05/17/Instructional-Technology2/</id>
    <published>2023-05-17T01:56:30.000Z</published>
    <updated>2023-05-17T02:19:59.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有效学习"><a href="#有效学习" class="headerlink" title="有效学习"></a>有效学习</h1><h2 id="协作学习活动"><a href="#协作学习活动" class="headerlink" title="协作学习活动"></a>协作学习活动</h2><p>通过小组或团队的形式组织学生进行学习的一种策略.</p><p>协作学习是学生以小组形式参与,为达到共同的学习目标,在一定的激励机制下<strong>最大化</strong>个人和他人的成果,而<strong>合作互助</strong>的一切相关行为</p><p>协作学习以小组活动为主体,强调异质分组,强调小组成员的合作互助,强调目标导向,强调总体成绩作为激励.</p><p>作为老师在布置小组写作任务时需要注意:</p><ul><li>设置课题的难度,避免一个人全干完</li><li>客观评鉴</li></ul><p>可能出现下面问题:</p><ul><li>协作学习中出现<strong>搭便车</strong>现象</li><li>林戈尔曼效应:当人们参加社会集体活动时,个人贡献会因人数的增加而逐渐减少,林格尔曼将其称之为”社会惰性”.</li></ul><p>为解决<strong>搭便车</strong>:</p><ul><li>在开始活动时,分配任务</li><li>结束后互评</li></ul><p>为解决<strong>林格尔曼</strong>效应:</p><ul><li>将小组内再进行分组</li></ul><p>协作活动五要素:</p><ol><li>积极互赖:不仅为自己的学习负责,也为小组的<strong>其他同伴的学习</strong>负责</li><li>个体职能:每个学生都承担一定学习任务,成功取决于<strong>所有组员个人的学习</strong></li><li>小组自加工:反思在某一活动时期某些组员的活动有益无益,哪些活动可以继续或者需要改进</li><li>社交技能</li><li>面对面的促进性交互</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;有效学习&quot;&gt;&lt;a href=&quot;#有效学习&quot; class=&quot;headerlink&quot; title=&quot;有效学习&quot;&gt;&lt;/a&gt;有效学习&lt;/h1&gt;&lt;h2 id=&quot;协作学习活动&quot;&gt;&lt;a href=&quot;#协作学习活动&quot; class=&quot;headerlink&quot; title=&quot;协作学习活</summary>
      
    
    
    
    
    <category term="IT" scheme="http://example.com/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>login_project</title>
    <link href="http://example.com/2023/05/16/login-project/"/>
    <id>http://example.com/2023/05/16/login-project/</id>
    <published>2023-05-16T01:45:40.000Z</published>
    <updated>2023-05-16T02:18:24.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登陆注册系统"><a href="#登陆注册系统" class="headerlink" title="登陆注册系统"></a>登陆注册系统</h1><p> 之前虽然一直在写博客,但一直以来没有进行过实际操作,综合蓝旭这次考试,发现了自己的很多问题,实际上机写了这个项目,将上机操作的过程写在这里,作为记录,也希望能够帮助到别人</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>JavaEE需要选择8版本,而不是更新版本</li><li>servlet中需要设置编码,不然输出中文会变成问号</li></ul><p>编码内容如下:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;登陆注册系统&quot;&gt;&lt;a href=&quot;#登陆注册系统&quot; class=&quot;headerlink&quot; title=&quot;登陆注册系统&quot;&gt;&lt;/a&gt;登陆注册系统&lt;/h1&gt;&lt;p&gt; 之前虽然一直在写博客,但一直以来没有进行过实际操作,综合蓝旭这次考试,发现了自己的很多问题,实际上机写了这</summary>
      
    
    
    
    
    <category term="bluemsunWork2" scheme="http://example.com/tags/bluemsunWork2/"/>
    
  </entry>
  
  <entry>
    <title>NENU_1173_7001中位数(知识点:qsort)</title>
    <link href="http://example.com/2023/05/11/NENU_1173_7001%E4%B8%AD%E4%BD%8D%E6%95%B0(qsort)/"/>
    <id>http://example.com/2023/05/11/NENU_1173_7001%E4%B8%AD%E4%BD%8D%E6%95%B0(qsort)/</id>
    <published>2023-05-11T00:53:10.000Z</published>
    <updated>2023-05-11T16:57:03.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NENU-1173-7001中位数-知识点-qsort"><a href="#NENU-1173-7001中位数-知识点-qsort" class="headerlink" title="NENU_1173_7001中位数(知识点:qsort)"></a>NENU_1173_7001中位数(知识点:qsort)</h1><p>原题网址:<a href="http://39.101.69.154/problem.php?id=1173#">P1173 - 7001 中位数 - NENUOJ</a></p><h2 id="1173-7001-中位数"><a href="#1173-7001-中位数" class="headerlink" title="1173: 7001 中位数"></a>1173: 7001 中位数</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个由N个非负整数构成的序列，我们来定义一下序列的中位数，如果N是奇数，在对序列排序后，中位数就是最中间的那个数，即排序后，中位数的位置为(N+1)&#x2F;2，这里序列的位置从1开始。如果N是偶数，则中位数为排序后中间两个数和的一半，即N&#x2F;2和(N&#x2F;2)+1处。但是需要注意的是原始序列可能是未排序的。<br>你的任务就是编程找出给定序列中的中位数。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>测试有多组数据，每组数据第一行只有一个整数N，表示序列的长度。接下来就是N个数，每个数占一行，序列的长度范围为1到250000。序列中的每个数都是不超过232-1（包括它）的正整数。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出中位数，保留小数点后一位。</p><h4 id="样例输入-复制"><a href="#样例输入-复制" class="headerlink" title="样例输入 复制"></a>样例输入 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="样例输出-复制"><a href="#样例输出-复制" class="headerlink" title="样例输出 复制"></a>样例输出 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.5</span><br></pre></td></tr></table></figure><h1 id="在写代码之前-让我们先来了解一下qsort"><a href="#在写代码之前-让我们先来了解一下qsort" class="headerlink" title="在写代码之前,让我们先来了解一下qsort"></a>在写代码之前,让我们先来了解一下qsort</h1><h2 id="qsort"><a href="#qsort" class="headerlink" title="qsort"></a>qsort</h2><p>qsort,全英为quicksort,顾名思义,是快速排序,是目前公认的一种比较好的排序算法,因为它的速度快于选择&#x2F;冒泡&#x2F;归并,因此系统在库中也用这个算法以便使用.</p><p>在C语言中，qsort是一个标准库函数，用于快速排序任意类型的数组。使用qsort函数需要包含stdlib.h头文件，其基本语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">qsort</span><span class="params">( <span class="type">void</span> *ptr, <span class="type">size_t</span> count, <span class="type">size_t</span> size, <span class="type">int</span> (*comp)(<span class="type">const</span> <span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *) )</span></span>;</span><br></pre></td></tr></table></figure><p>其中，参数解释如下：</p><ul><li><code>ptr</code>：指向待排序数组的指针；</li><li><code>count</code>：数组元素个数；</li><li><code>size</code>：每个数组元素占用的字节数；</li><li><code>comp</code>：指向比较函数的指针。</li></ul><p>要使用qsort函数进行排序，需要自定义一个<strong>比较函数</strong>，该函数可以返回三种不同的值：</p><ul><li>如果第一个参数小于第二个参数，返回负值；</li><li>如果两个参数相等，返回0；</li><li>如果第一个参数大于第二个参数，返回正值。</li></ul><p>一个简单的例子如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="type">int</span>*)a - *(<span class="type">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">qsort</span>(arr, len, <span class="built_in">sizeof</span>(<span class="type">int</span>), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，自定义了一个比较函数<code>cmp</code>，它将两个整数作为参数，并返回它们的差值。主函数中，使用qsort函数对整数数组进行排序，并将结果输出到控制台。</p><h2 id="代码-c-纯代码"><a href="#代码-c-纯代码" class="headerlink" title="代码(c_纯代码)"></a>代码(c_纯代码)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL que[<span class="number">250001</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="type">int</span> *)a - *(<span class="type">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i, n;</span><br><span class="line"><span class="type">double</span> res = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;que[i]);</span><br><span class="line">&#125;</span><br><span class="line">qsort(que, n, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">double</span> ans = que[n / <span class="number">2</span> - <span class="number">1</span>] + que[n / <span class="number">2</span>];</span><br><span class="line">ans /= <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%0.1f&quot;</span>, ans);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">double</span> ans = <span class="number">1.0</span> * que[(n + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%0.1f&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码-c-注释版"><a href="#代码-c-注释版" class="headerlink" title="代码(c_注释版)"></a>代码(c_注释版)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL; <span class="comment">// 宏定义LL为long long类型</span></span><br><span class="line">LL que[<span class="number">250001</span>]; <span class="comment">// 定义最大容量为250001的long long类型数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a, <span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *(LL *)a - *(LL *)b; <span class="comment">// 比较函数，按升序排列,一次*找地址,第二次*找地址的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, n;</span><br><span class="line">    <span class="type">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF) &#123; <span class="comment">// 循环读入每行数据</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;que[i]); <span class="comment">// 读入第i个数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        qsort(que, n, <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>), cmp); <span class="comment">// 使用qsort排序，注意第三个参数应该是每个元素的字节数sizeof(long long)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123; <span class="comment">// 如果n为偶数</span></span><br><span class="line">            <span class="type">double</span> ans = que[n / <span class="number">2</span> - <span class="number">1</span>] + que[n / <span class="number">2</span>]; <span class="comment">// 取中间两个数，求平均值</span></span><br><span class="line">            ans /= <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%0.1f&quot;</span>, ans); <span class="comment">// 输出结果，保留1位小数</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果n为奇数</span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">1.0</span> * que[(n + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>]; <span class="comment">// 直接取中间数</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%0.1f&quot;</span>, ans); <span class="comment">// 输出结果，保留1位小数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码-c"><a href="#代码-c" class="headerlink" title="代码(c++)"></a>代码(c++)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span>    <span class="comment">// 引用 C++ STL 中所有头文件。</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;        <span class="comment">// 使用命名空间 std。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;                <span class="comment">// 主函数。</span></span><br><span class="line">    <span class="type">int</span> a;                  <span class="comment">// 定义整数变量 a，但未使用。</span></span><br><span class="line">    <span class="type">int</span> n;                  <span class="comment">// 定义整数变量 n，表示数组长度。</span></span><br><span class="line">    <span class="type">int</span> temp[<span class="number">250005</span>];       <span class="comment">// 定义整型数组 temp，长度为 250005。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF) &#123;        <span class="comment">// 当输入未结束时循环执行。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;     <span class="comment">// 循环输入数组中每个元素。</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;temp[i]);          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(temp, temp + n);               <span class="comment">// 将数组 temp 中各元素从小到大排序。</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;                   <span class="comment">// 如果数组长度为偶数。</span></span><br><span class="line">            <span class="type">double</span> ans = temp[n / <span class="number">2</span> - <span class="number">1</span>] + temp[n / <span class="number">2</span>];          <span class="comment">// 计算中间两个数之和。</span></span><br><span class="line">            ans /= <span class="number">2</span>;                                           <span class="comment">// 求平均数。</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%0.1f&quot;</span>, ans);                                <span class="comment">// 输出结果并保留小数点后一位。</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                            <span class="comment">// 如果数组长度为奇数。</span></span><br><span class="line">            <span class="type">double</span> ans = <span class="number">1.0</span> * temp[(n + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>];             <span class="comment">// 取中间的一个数作为中位数。</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%0.1f&quot;</span>, ans);                                <span class="comment">// 输出结果并保留小数点后一位。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);                       <span class="comment">// 输出换行符。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>欢迎收藏这个博客以关注下次更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NENU-1173-7001中位数-知识点-qsort&quot;&gt;&lt;a href=&quot;#NENU-1173-7001中位数-知识点-qsort&quot; class=&quot;headerlink&quot; title=&quot;NENU_1173_7001中位数(知识点:qsort)&quot;&gt;&lt;/a&gt;NENU</summary>
      
    
    
    
    
    <category term="c" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Instructional_Technology1</title>
    <link href="http://example.com/2023/05/10/Instructional-Technology1/"/>
    <id>http://example.com/2023/05/10/Instructional-Technology1/</id>
    <published>2023-05-10T02:05:25.000Z</published>
    <updated>2023-05-17T02:04:40.127Z</updated>
    
    <content type="html"><![CDATA[<p> 这是第三次课,前两节课的时候没做好记录,从现在开始记录</p><h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><h2 id="理解教育技术内涵"><a href="#理解教育技术内涵" class="headerlink" title="理解教育技术内涵"></a>理解教育技术内涵</h2><h2 id="教育技术的理论基础"><a href="#教育技术的理论基础" class="headerlink" title="教育技术的理论基础"></a>教育技术的理论基础</h2><h3 id="过程理论"><a href="#过程理论" class="headerlink" title="过程理论"></a>过程理论</h3><h4 id="传播学"><a href="#传播学" class="headerlink" title="传播学"></a>传播学</h4><h4 id="系统科学理论"><a href="#系统科学理论" class="headerlink" title="系统科学理论"></a>系统科学理论</h4><h3 id="教育心理学理论"><a href="#教育心理学理论" class="headerlink" title="教育心理学理论"></a>教育心理学理论</h3><h4 id="行为主义理论"><a href="#行为主义理论" class="headerlink" title="行为主义理论"></a>行为主义理论</h4><h4 id="认知主义学习理论"><a href="#认知主义学习理论" class="headerlink" title="认知主义学习理论"></a>认知主义学习理论</h4><h4 id="构建主义理论"><a href="#构建主义理论" class="headerlink" title="构建主义理论"></a>构建主义理论</h4><h2 id="教育技术学的技术基础"><a href="#教育技术学的技术基础" class="headerlink" title="教育技术学的技术基础"></a>教育技术学的技术基础</h2><h2 id="教育技术学人的专业发展"><a href="#教育技术学人的专业发展" class="headerlink" title="教育技术学人的专业发展"></a>教育技术学人的专业发展</h2><h2 id="教育技术学的专业方向"><a href="#教育技术学的专业方向" class="headerlink" title="教育技术学的专业方向"></a>教育技术学的专业方向</h2><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><p>了解教育技术学学科,定位学习领域和发展方向</p><h1 id="课程评价"><a href="#课程评价" class="headerlink" title="课程评价"></a>课程评价</h1><h2 id="过程性评价-60"><a href="#过程性评价-60" class="headerlink" title="过程性评价(60%)"></a>过程性评价(60%)</h2><p>课堂互动,作业小组活动参与</p><h2 id="总结性评价-40"><a href="#总结性评价-40" class="headerlink" title="总结性评价(40%)"></a>总结性评价(40%)</h2><p>期末考试</p><h1 id="教育技术的本质"><a href="#教育技术的本质" class="headerlink" title="教育技术的本质"></a>教育技术的本质</h1><p>运用技术手段去优化教育,教学过程,以提高教育,教学的效果,效率与效益的理论与实践</p><h1 id="技术-教学-教学为主-x3D-创新融合"><a href="#技术-教学-教学为主-x3D-创新融合" class="headerlink" title="技术+教学(教学为主)&#x3D;创新融合"></a>技术+教学(教学为主)&#x3D;创新融合</h1><h2 id="学习理论"><a href="#学习理论" class="headerlink" title="学习理论"></a>学习理论</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 这是第三次课,前两节课的时候没做好记录,从现在开始记录&lt;/p&gt;
&lt;h1 id=&quot;课程介绍&quot;&gt;&lt;a href=&quot;#课程介绍&quot; class=&quot;headerlink&quot; title=&quot;课程介绍&quot;&gt;&lt;/a&gt;课程介绍&lt;/h1&gt;&lt;h2 id=&quot;理解教育技术内涵&quot;&gt;&lt;a href=&quot;#理</summary>
      
    
    
    
    
    <category term="IT" scheme="http://example.com/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>NENU_1157_5204二进制数</title>
    <link href="http://example.com/2023/05/02/NENU-1157-5204%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/"/>
    <id>http://example.com/2023/05/02/NENU-1157-5204%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</id>
    <published>2023-05-02T14:36:15.000Z</published>
    <updated>2023-05-11T16:16:23.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1157-5204-二进制数"><a href="#1157-5204-二进制数" class="headerlink" title="1157: 5204 二进制数"></a>1157: 5204 二进制数</h1><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个正整数n，要求输出对应的二进制数中所有数码“1”的位置。注意最低位为第0位。例如13的二进制形式为1101，因此数码1的位置为：0,2,3。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>输入文件中的第1行为一个正整数d，表示输入文件中测试数据的个数，1&lt;&#x3D;d&lt;&#x3D;10，接下来有d个测试数据。每个测试数据占一行，只有一个整数n，1&lt;&#x3D;n&lt;&#x3D; 106。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出包括d行，即对输入文件中的每个测试数据，输出一行。第i行，1 &lt;&#x3D; i &lt;&#x3D; d，以升序的顺序输出第i个测试数据中的整数的二进制形式中所有数码1的位置，位置之间有1个空格，最后一个位置后面没有空格。</p><h4 id="样例输入-复制"><a href="#样例输入-复制" class="headerlink" title="样例输入 复制"></a>样例输入 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">13</span><br><span class="line">127</span><br></pre></td></tr></table></figure><h4 id="样例输出-复制"><a href="#样例输出-复制" class="headerlink" title="样例输出 复制"></a>样例输出 复制</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 2 3</span><br><span class="line">0 1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h4 id="题目原地址"><a href="#题目原地址" class="headerlink" title="题目原地址"></a>题目原地址</h4><p><a href="http://39.101.69.154/problem.php?id=1157#">P1157 - 5204 二进制数 - NENUOJ</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span>  <span class="comment">// 引入标准C++库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> d;  <span class="comment">// 定义变量d，表示数据组数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;d);  <span class="comment">// 输入数据组数</span></span><br><span class="line">    <span class="keyword">while</span>(d--)&#123;  <span class="comment">// 循环读取每组数据</span></span><br><span class="line">        <span class="type">int</span> n;  <span class="comment">// 定义变量n，表示输入的数字</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);  <span class="comment">// 输入数字n</span></span><br><span class="line">        <span class="type">int</span> tag = <span class="number">0</span>;  <span class="comment">// 定义变量tag，记录当前二进制位的位置 </span></span><br><span class="line">        <span class="type">int</span> cc = <span class="number">0</span>;  <span class="comment">// 定义变量cc，用于判断是否为第一次输出 </span></span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;  <span class="comment">// 转换为二进制 </span></span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>)&#123;  <span class="comment">// 当前二进制位为1 </span></span><br><span class="line">                <span class="keyword">if</span>(cc)&#123;  <span class="comment">// 不是第一次输出 </span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);  <span class="comment">// 输出空格 </span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  <span class="comment">// 第一次输出</span></span><br><span class="line">                    cc = <span class="number">1</span>;  </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,tag);  <span class="comment">// 输出当前二进制位的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            tag++;  <span class="comment">// 移动到下一位</span></span><br><span class="line">            n/=<span class="number">2</span>;  <span class="comment">// 右移一位 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1157-5204-二进制数&quot;&gt;&lt;a href=&quot;#1157-5204-二进制数&quot; class=&quot;headerlink&quot; title=&quot;1157: 5204 二进制数&quot;&gt;&lt;/a&gt;1157: 5204 二进制数&lt;/h1&gt;&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="c" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="http://example.com/2023/04/29/JDBC/"/>
    <id>http://example.com/2023/04/29/JDBC/</id>
    <published>2023-04-29T14:57:46.000Z</published>
    <updated>2023-05-11T00:26:02.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC学习笔记"><a href="#JDBC学习笔记" class="headerlink" title="JDBC学习笔记"></a>JDBC学习笔记</h1><p>JDBC（Java数据库连接）是Java编程语言中一个用于规范客户端程序如何访问数据库的应用程序接口，提供了一种与各种关系型数据库交互的方式。本文将介绍JDBC的基础知识和使用方法。</p><h2 id="JDBC的基本概念"><a href="#JDBC的基本概念" class="headerlink" title="JDBC的基本概念"></a>JDBC的基本概念</h2><p>JDBC主要由两个部分组成：JDBC API 和 JDBC驱动程序。</p><ul><li>JDBC API是一组Java类和接口，它们定义了Java程序如何与关系型数据库进行通信。JDBC API包括三个层次结构：第一层是管理与数据源的连接，第二层是执行SQL语句，第三层是处理结果集。</li><li>JDBC驱动程序则是针对不同数据库的具体实现，它们将JDBC API的调用转化为适合特定数据库的协议。根据JDBC规范的不同，JDBC驱动程序可以分为四种类型：JDBC-ODBC桥接驱动、本地API驱动、网络协议驱动和纯Java驱动。</li></ul><h2 id="JDBC的使用方法"><a href="#JDBC的使用方法" class="headerlink" title="JDBC的使用方法"></a>JDBC的使用方法</h2><p>在使用JDBC之前，需要下载并安装相应的JDBC驱动程序。以MySQL为例，我们可以从MySQL官网下载JDBC驱动程序，并将其添加到项目的classpath下。</p><p>在Java程序中使用JDBC需要经过以下步骤：</p><ol><li><p>加载驱动程序。使用Class.forName()方法来加载JDBC驱动程序。例如，加载MySQL的驱动程序可以使用以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制代码Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure></li><li><p>建立数据库连接。使用DriverManager.getConnection()方法来获取一个与数据库建立的连接。例如，连接MySQL数据库的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">复制代码String url = &quot;jdbc:mysql://localhost:3306/test&quot;;</span><br><span class="line">String username = &quot;root&quot;;</span><br><span class="line">String password = &quot;123456&quot;;</span><br><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure></li><li><p>执行SQL语句。使用Connection对象的createStatement()方法创建一个Statement对象，并使用该对象执行SQL语句。例如，查询数据表中所有数据的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制代码Statement stmt = conn.createStatement();</span><br><span class="line">ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM student&quot;);</span><br></pre></td></tr></table></figure></li><li><p>处理结果集。使用ResultSet对象来操作查询结果集。例如，遍历查询结果并输出每行数据的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复制代码while (rs.next()) &#123;</span><br><span class="line">   int id = rs.getInt(&quot;id&quot;);</span><br><span class="line">   String name = rs.getString(&quot;name&quot;);</span><br><span class="line">   int age = rs.getInt(&quot;age&quot;);</span><br><span class="line">   System.out.println(&quot;ID:&quot; + id + &quot;, Name:&quot; + name + &quot;, Age:&quot; + age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关闭连接。使用Connection、Statement和ResultSet对象的close()方法来关闭连接。</p></li></ol><p>以上就是JDBC的基本使用方法。当然，JDBC还有很多高级用法和技巧，需要根据具体的业务需求进行学习和掌握。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDBC学习笔记&quot;&gt;&lt;a href=&quot;#JDBC学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JDBC学习笔记&quot;&gt;&lt;/a&gt;JDBC学习笔记&lt;/h1&gt;&lt;p&gt;JDBC（Java数据库连接）是Java编程语言中一个用于规范客户端程序如何访问数据库的应用</summary>
      
    
    
    
    
    <category term="BluemSun" scheme="http://example.com/tags/BluemSun/"/>
    
  </entry>
  
  <entry>
    <title>servlet&amp;jar</title>
    <link href="http://example.com/2023/04/29/servlet&amp;jar/"/>
    <id>http://example.com/2023/04/29/servlet&amp;jar/</id>
    <published>2023-04-29T14:52:50.000Z</published>
    <updated>2023-05-11T00:25:56.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet-mvc-x2F-jar包介绍-x2F-如何导入使用"><a href="#Servlet-mvc-x2F-jar包介绍-x2F-如何导入使用" class="headerlink" title="Servlet+mvc&#x2F;jar包介绍&#x2F;如何导入使用"></a>Servlet+mvc&#x2F;jar包介绍&#x2F;如何导入使用</h1><p>请补充下面文字中讲得比较简略的部分Servlet 是 Java Web 开发中的重要组成部分之一，它是一种规范（一个组织设计的一种标准），用于处理 B&#x2F;S（浏览器&#x2F;服务器）结构下的浏览器请求。与底层源码无关，开发者可以在实现 Servlet 时拿出用户名和密码，并从数据库中检索用户信息。</p><p>Servlet 规范了许多接口、类、文件内容和路径，其中 Java SE 是标准版，而 Java EE 则是商业版本。Tomcat 是遵循 Servlet 规范的一种服务器。</p><p>开发 Servlet 应用程序大致需要经过如下步骤：</p><p>在项目目录下新建一个名为 crm 的目录。<br>新建一个名为 WEB-INF 的目录，在其中创建 classes 和 lib 目录以及一个名为 web.xml 的文件。<br>在 web.xml 文件中设置 Servlet 的映射关系。<br>实现 Servlet 类，并在其中重写 init、service 和 destroy 方法。<br>部署应用程序，并启动 Tomcat 服务器。<br>Servlet 生命周期包括了如下几个阶段：</p><p>在第一次被用户访问时创建，<br>服务器关闭时销毁，<br>Servlet 对象只有一个（单例），<br>对象中的成员变量都是共享的。<br>Servlet 的维护由服务器控制，生命周期也由 Web 控制。不建议手动定义构造函数。</p><p>在 Servlet 的 destroy 方法中，可以将数据存储到应该到的位置，在 init 方法中加载文件。</p><p>GenericServlet 是设计程序的理论，是一个抽象类。它解决了直接编写 Servlet 复杂且必须要实现 init 和 destroy 的问题。ServletConfig 存储了配置信息，并存储了 web.xml 配置信息，一一对应。ServletContext 环境（上下文）是 Web 应用中唯一的，生命周期由服务器控制。</p><p>HTTP 协议是一种基于 TCP&#x2F;IP 协议的应用层协议，为 Web 浏览器和 Web 服务器之间的通信设计。HTTPServlet 继承自 GenericServlet 并专门针对 HTTP 协议的请求做了一些调整和优化。</p><p>在 HTTP 协议中，客户端发送请求并获取响应。请求包含请求头、请求体和请求行，其中请求类型包括 get、post、delete、put、head、option 和 trace。响应包括状态行、响应头、空白行和响应体。GMT 标准时间表示时区标准。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Servlet-mvc-x2F-jar包介绍-x2F-如何导入使用&quot;&gt;&lt;a href=&quot;#Servlet-mvc-x2F-jar包介绍-x2F-如何导入使用&quot; class=&quot;headerlink&quot; title=&quot;Servlet+mvc&amp;#x2F;jar包介绍&amp;#x</summary>
      
    
    
    
    
    <category term="BluemSun" scheme="http://example.com/tags/BluemSun/"/>
    
  </entry>
  
  <entry>
    <title>Java Exception classes and commonly used classes/containers/generics</title>
    <link href="http://example.com/2023/04/29/JAVAIO/"/>
    <id>http://example.com/2023/04/29/JAVAIO/</id>
    <published>2023-04-29T14:52:03.000Z</published>
    <updated>2023-05-11T00:26:07.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习Java-IO"><a href="#学习Java-IO" class="headerlink" title="学习Java IO"></a>学习Java IO</h1><p>Java IO（Input&#x2F;Output）是Java编程中非常重要的一个概念。它允许我们从输入源（如键盘或文件）读取数据，并将数据写入输出目标（如屏幕或文件）。</p><h2 id="InputStream和OutputStream"><a href="#InputStream和OutputStream" class="headerlink" title="InputStream和OutputStream"></a>InputStream和OutputStream</h2><p>InputStream是一个抽象类，代表数据源。InputStream有多个具体子类，如ByteArrayInputStream、FileInputStream等。OutputStream也是一个抽象类，代表数据目标。OutputStream有多个具体子类，如ByteArrayOutputStream、FileOutputStream等。</p><p>以下是使用FileInputStream来读取一个文本文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java复制代码String fileName = &quot;example.txt&quot;;</span><br><span class="line">try (InputStream is = new FileInputStream(fileName)) &#123;</span><br><span class="line">    int bytesRead;</span><br><span class="line">    while ((bytesRead = is.read()) != -1) &#123;</span><br><span class="line">        System.out.print((char) bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">    System.out.println(&quot;文件&quot; + fileName + &quot;不存在&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    System.out.println(&quot;读取文件&quot; + fileName + &quot;时发生错误&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用InputStream和OutputStream时，我们需要注意使用try-catch语句处理异常。例如，当我们尝试从一个不存在的文件中读取数据时，会产生FileNotFoundException异常。</p><h2 id="Reader和Writer"><a href="#Reader和Writer" class="headerlink" title="Reader和Writer"></a>Reader和Writer</h2><p>Reader和Writer与InputStream和OutputStream相似，但它们用于读取和写入字符流而不是字节流。这些类可以处理各种字符集，包括ASCII、Unicode和UTF-8等。</p><p>以下是使用BufferedReader来读取一个文本文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">java复制代码String fileName = &quot;example.txt&quot;;</span><br><span class="line">try (Reader reader = new BufferedReader(new FileReader(fileName))) &#123;</span><br><span class="line">    int character;</span><br><span class="line">    while ((character = reader.read()) != -1) &#123;</span><br><span class="line">        System.out.print((char) character);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">    System.out.println(&quot;文件&quot; + fileName + &quot;不存在&quot;);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    System.out.println(&quot;读取文件&quot; + fileName + &quot;时发生错误&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，我们在使用Reader和Writer时也需要注意异常处理。例如，当我们尝试读取一个不存在的文件时，会产生IOException异常。</p><h2 id="File和Directory"><a href="#File和Directory" class="headerlink" title="File和Directory"></a>File和Directory</h2><p>File类代表文件或目录路径名的抽象表示。我们可以使用它来创建、重命名、删除文件或目录等操作。</p><p>以下是创建一个新文件的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java复制代码String fileName = &quot;new_file.txt&quot;;</span><br><span class="line">File file = new File(fileName);</span><br><span class="line">if (file.createNewFile()) &#123;</span><br><span class="line">    System.out.println(&quot;文件&quot; + fileName + &quot;创建成功&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;文件&quot; + fileName + &quot;已存在&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Directory类代表一个目录，它的实例可以用来获取该目录中的文件列表、创建文件夹等操作。</p><p>以下是创建一个新目录的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java复制代码String dirName = &quot;new_directory&quot;;</span><br><span class="line">File dir = new File(dirName);</span><br><span class="line">if (dir.mkdir()) &#123;</span><br><span class="line">    System.out.println(&quot;目录&quot; + dirName + &quot;创建成功&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    System.out.println(&quot;目录&quot; + dirName + &quot;已存在&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用File和Directory时，也需要谨慎处理异常。例如，当我们尝试创建一个已经存在的目录时，会产生IOException异常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java IO是Java编程中非常重要的概念，并且在实际开发中也经常会用到。在使用Java IO时需要注意异常处理，以避免程序出现不可预料的错误。熟练掌握Java IO可以帮助我们更加高效地进行文件读写操作，提高代码的质量和效率。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例:"></a>实例:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bluemsun.Chen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 2022级 信科 教技 陈琦煜</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">currentDirectory</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.print(currentDirectory + <span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            String[] parts = command.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> parts[<span class="number">0</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> parts.length &gt; <span class="number">1</span> ? parts[<span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;cd&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;target directory is required&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cd(target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;ls&quot;</span>:</span><br><span class="line">                    ls();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;mkdir&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;target directory is required&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mkdir(target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;touch&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;target file is required&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        touch(target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;cat&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;target file is required&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cat(target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;target file or directory is required&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        delete(target);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;mv&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (parts.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;source and target are required&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mv(parts[<span class="number">1</span>], parts[<span class="number">2</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;unknown command: &quot;</span> + action);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cd</span><span class="params">(String target)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, target);</span><br><span class="line">        <span class="keyword">if</span> (!file.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;not a directory: &quot;</span> + target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentDirectory = file.getAbsolutePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ls</span><span class="params">()</span> &#123;</span><br><span class="line">        File[] files = <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory).listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mkdir</span><span class="params">(String target)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, target);</span><br><span class="line">        <span class="keyword">if</span> (!file.mkdir()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed to create directory: &quot;</span> + target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">touch</span><span class="params">(String target)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, target);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;failed to create file: &quot;</span> + target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed to create file: &quot;</span> + target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String target)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, target);</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            String[] entries = file.list();</span><br><span class="line">            <span class="keyword">for</span> (String entry : entries) &#123;</span><br><span class="line">                delete(target + File.separator + entry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!file.delete()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed to delete file or directory: &quot;</span> + target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mv</span><span class="params">(String source, String target)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, source);</span><br><span class="line">        <span class="type">File</span> <span class="variable">tgt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, target);</span><br><span class="line">        <span class="keyword">if</span> (src.renameTo(<span class="keyword">new</span> <span class="title class_">File</span>(tgt,src.getName()))) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;move successful&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;failed to move file or directory&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cat</span><span class="params">(String target)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(currentDirectory, target);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(file);</span><br><span class="line">                <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                    System.out.println(scanner.nextLine());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;failed to read file: &quot;</span> + target);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;file not found: &quot;</span> + target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习Java-IO&quot;&gt;&lt;a href=&quot;#学习Java-IO&quot; class=&quot;headerlink&quot; title=&quot;学习Java IO&quot;&gt;&lt;/a&gt;学习Java IO&lt;/h1&gt;&lt;p&gt;Java IO（Input&amp;#x2F;Output）是Java编程中非常重要的一个概</summary>
      
    
    
    
    
    <category term="BluemSun" scheme="http://example.com/tags/BluemSun/"/>
    
  </entry>
  
  <entry>
    <title>Java Exception classes and commonly used classes/containers/generics</title>
    <link href="http://example.com/2023/04/29/Java-Exception-classes-and-commonly-used-classes-containers-generics/"/>
    <id>http://example.com/2023/04/29/Java-Exception-classes-and-commonly-used-classes-containers-generics/</id>
    <published>2023-04-29T14:52:03.000Z</published>
    <updated>2023-05-11T00:26:14.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java异常类-x2F-常用类-x2F-容器-x2F-泛型"><a href="#Java异常类-x2F-常用类-x2F-容器-x2F-泛型" class="headerlink" title="Java异常类&#x2F;常用类&#x2F;容器&#x2F;泛型"></a>Java异常类&#x2F;常用类&#x2F;容器&#x2F;泛型</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>在进入正题之前,先来学习一下this,在上一篇博客中我们并没有详细说明这个关键字.</p><p>this是Java中常用的关键字,可用于任何实例方法内指向当前对象,也可指向对其调用当前方法的对象,或者在需要当前类型对象引用时使用</p><p>在讲解this的作用前,我们先来补充一下实例方法和类方法的内容:</p><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>记得先前的非静态变量吗?这是类似的</p><p>当定义方法的时候,如果没有冠以static修饰字,那么这个方法就是实例方法</p><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>与实例方法相对的是类方法,冠以static的方法称为类方法</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>类中的实例方法可以互相调用,并可以调用类方法.</p><p>类方法也可以相互调用,但不能直接调用实例方法,除非类方法引入局部对象,然后通过局部对象调用实例方法.</p><p>对变量也是一样的</p><p>实例方法可以直接引用实例变量,也可引用类变量</p><p>类方法只能直接引用类变量</p><p>下面是一个示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;<span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> b;<span class="comment">//类变量</span></span><br><span class="line">    <span class="type">float</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;<span class="comment">//实例方法</span></span><br><span class="line">        a = x &gt; y ? x:y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> b0)</span>&#123;<span class="comment">//类方法</span></span><br><span class="line">        b = b0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们回来重新讲解this</p><p>Java中的关键字this指代当前对象,它可以用来访问当前对象的属性和方法.</p><p>在Java中,每个对象都有自己独立的属性值,因此要访问一个对象的属性,必须使用该对象的引用.</p><p>this关键字就是用来表示当前对象的引用,使用this关键字可以明确指出代码是在访问当前对象的属性和方法.</p><p>this关键字使用有以下几种情况:</p><ol><li>在构造方法中调用其他重载的构造方法是,用this调用另外一个构造方法,以避免代码的重复.</li><li>在实例代码中调用其他实例方法时,可以省略this关键字.</li><li>当局部变量和成员变量名称相同时,可以使用this关键字区分.</li><li>在内部类中访问外部类的成员变量和方法时,需要使用this关键字.</li></ol><p>下面是一个简单的示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0</span>);<span class="comment">//调用另外一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中,第一个无参构造方法通过this关键字调用了另一个有参数的构造方法,避免了代码的重复.</p><h2 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h2><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p>异常是运行时产生的问题,通常用Exception描述.</p><p>试图打开一个根本不存在的文件&#x2F;除以0&#x2F;数组下标越界等问题都会导致产生异常.</p><p>我们可以简单地将异常分为两类,一类是<strong>已检查异常</strong>,一类是<strong>未检查异常</strong>(也称运行时异常).</p><p>已检查异常好说,Java中有try-catch-finally块作为这类异常的处理机制.</p><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h4><p>当一个方法内部出现异常时,try块内的代码会被执行,如果某个语句引发了异常,则该语句后面的代码将不再执行,而是跳转到相应的catch块进行处理.</p><p>catch块后面可以跟多个catch块,用于处理不同类型的异常.</p><p>finally块中的代码无论是否出现异常都会执行,用于释放资源等工作.</p><p>异常处理会改变程序的控制流程,让程序有机会对错误进行处理.</p><p>Java处理<strong>throw</strong>关键字抛出了一个Exception子类的实例表示一场发生,该异常实例封装了异常事件的信息并提交给Java运行时系统</p><h3 id="抛出异常throw"><a href="#抛出异常throw" class="headerlink" title="抛出异常throw"></a>抛出异常throw</h3><p>在Java中,throw关键字用于抛出一个指定的异常.</p><p>使用方法:</p><ol><li>创建一个异常对象,封装一些提示信息</li><li>将这个异常告知调用者</li></ol><p>使用格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类名(参数);</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;除数不能为0&quot;</span>); <span class="comment">// 抛出异常</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(a / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj.divide(<span class="number">6</span>, <span class="number">0</span>); <span class="comment">// 调用divide方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常信息：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明异常throws"><a href="#声明异常throws" class="headerlink" title="声明异常throws"></a>声明异常throws</h3><p>声明异常throws</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java异常类-x2F-常用类-x2F-容器-x2F-泛型&quot;&gt;&lt;a href=&quot;#Java异常类-x2F-常用类-x2F-容器-x2F-泛型&quot; class=&quot;headerlink&quot; title=&quot;Java异常类&amp;#x2F;常用类&amp;#x2F;容器&amp;#x2F;泛型&quot;&gt;</summary>
      
    
    
    
    
    <category term="BluemSun" scheme="http://example.com/tags/BluemSun/"/>
    
  </entry>
  
  <entry>
    <title>Disjoint-set data structure</title>
    <link href="http://example.com/2023/04/28/Disjoint-set-data-structure/"/>
    <id>http://example.com/2023/04/28/Disjoint-set-data-structure/</id>
    <published>2023-04-28T13:37:50.000Z</published>
    <updated>2023-05-11T15:26:12.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>等待更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并查集&quot;&gt;&lt;a href=&quot;#并查集&quot; class=&quot;headerlink&quot; title=&quot;并查集&quot;&gt;&lt;/a&gt;并查集&lt;/h1&gt;&lt;p&gt;等待更新&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>IDEA and Java</title>
    <link href="http://example.com/2023/04/26/IDEA-and-Java/"/>
    <id>http://example.com/2023/04/26/IDEA-and-Java/</id>
    <published>2023-04-26T11:51:43.000Z</published>
    <updated>2023-05-11T00:26:25.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA的基本使用和Java语言"><a href="#IDEA的基本使用和Java语言" class="headerlink" title="IDEA的基本使用和Java语言"></a>IDEA的基本使用和Java语言</h1><p>当今时代，创意是无处不在的。然而，如果没有正确的工具和技能，这些想法可能会永远停留在脑海中。这就是为什么我们需要一个强大的工具来帮助我们实现我们的想法 - IDEA。</p><p>IDEA是一款非常流行的Java集成开发环境（IDE）工具，它可以让程序员轻松地编写Java代码，并提供了丰富的功能，可以大幅提高生产效率。</p><p>在本文中，我们将介绍IDEA的基本使用以及Java面向对象三大特性。</p><h2 id="IDEA基本使用"><a href="#IDEA基本使用" class="headerlink" title="IDEA基本使用"></a>IDEA基本使用</h2><p>以下是IDEA的基本使用教程：</p><h4 id="下载并安装IDEA："><a href="#下载并安装IDEA：" class="headerlink" title="下载并安装IDEA："></a><strong>下载并安装IDEA</strong>：</h4><p>首先，您需要从IntelliJ IDEA官网下载适用于您的操作系统的IDEA版本。然后按照安装向导进行安装.</p><h4 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a><strong>创建项目</strong>：</h4><p>打开IDEA后，选择“Create New Project”创建新项目。在此过程中，您需要选择要使用的语言及其相关框架、库等。</p><h4 id="编写代码："><a href="#编写代码：" class="headerlink" title="编写代码："></a><strong>编写代码</strong>：</h4><p>IDEA提供了一种直观而且易于使用的代码编辑器，可以帮助您快速编写Java代码。您可以使用自动补全、调试器、重构等工具来改善您的开发体验。</p><h4 id="运行程序："><a href="#运行程序：" class="headerlink" title="运行程序："></a><strong>运行程序</strong>：</h4><p>一旦您完成了代码编写，您可以通过单击运行按钮或使用快捷键来运行程序。IDEA会自动编译您的代码并运行应用程序。</p><h4 id="调试程序："><a href="#调试程序：" class="headerlink" title="调试程序："></a><strong>调试程序</strong>：</h4><p>如果您遇到问题，可以使用IDEA内置的调试器分析代码并修复错误。IDEA提供了多种调试选项，例如断点调试、变量监视器、控制台等。</p><h2 id="IDEA-功能简介"><a href="#IDEA-功能简介" class="headerlink" title="IDEA 功能简介"></a>IDEA 功能简介</h2><ol><li><strong>项目管理</strong>：IDEA 可以帮助开发者创建、打开、删除和导入项目，以及设置项目相关的属性和依赖项。</li><li><strong>代码编辑</strong>：IDEA 提供了智能代码提示、自动完成、代码格式化等功能，使得编写代码更为方便和高效。</li><li><strong>调试</strong>：IDEA 的调试器可以帮助开发者检测代码中的错误，并通过设置断点、查看变量值等方式来定位问题。</li><li><strong>版本控制</strong>：IDEA 可以集成多种版本控制工具（如 Git、SVN 等），并提供了可视化的界面来管理项目的版本控制。</li><li><strong>插件管理</strong>：IDEA 支持插件扩展机制，可以通过安装插件来增加额外的功能和特性。</li><li><strong>代码检查</strong>：IDEA 内置了许多代码检查工具（如 FindBugs、Checkstyle 等），可以帮助开发者在编写代码时避免一些潜在问题。</li><li><strong>测试</strong>：IDEA 支持单元测试和集成测试，可以帮助开发者快速发现和修复代码中的问题。</li><li><strong>性能分析</strong>：IDEA 提供了分析内存占用、CPU 使用率等方面的工具，帮助开发者检查和优化程序的性能。</li><li><strong>重构</strong>：IDEA 提供了许多自动化重构操作，如提取方法、内联方法、改变方法签名等，可以帮助开发者更好地管理代码。</li><li><strong>任务管理</strong>：IDEA 可以帮助开发者创建和管理任务，包括设置任务状态、优先级、截止日期等信息。</li><li><strong>持续集成</strong>：IDEA 支持持续集成工具（如 Jenkins、Travis CI 等），可以与这些工具进行无缝集成。</li><li><strong>代码回退</strong>：IDEA 可以通过版本控制来恢复之前错误的代码版本。</li><li><strong>多语言支持</strong>：除了 Java 以外，IDEA 还支持其他编程语言和框架，如 Kotlin、Python、JavaScript、Spring Framework 等。</li></ol><h2 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Java是一门高度优化的面向对象编程语言,由Sun公司于1995年推出.</p><p>其设计目标是可以简单安全可靠地运行在各种平台上.</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>Java语言中的类是一种面向对象的编程机制,它是Java程序的基本组成单位之一.</p><p>简单点说呢,类是一个模板或蓝图,用于定义对象的<strong>属性</strong>(即变量)和<strong>方法</strong>(即函数)</p><p>我们可以通过创建类来定义自己的数据类型,然后利用这些数据类型创建对象,并对创建出来的对象进行操作.</p><p>在Java中,每个类都必须有一个与类名相同的构造方法,用于初始化对象的属性值.</p><p>在实际应用中,我们通常把相关的类组织成一个包(Package),以便更好地管理和维护代码.</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在Java中,方法是一段可重用的代码块,用来实现特定的功能和操作.</p><p>方法可以认为是类的行为,它们封装了某些逻辑,可以通过调用来完成特定的任务.</p><p>方法通常包括方法名,返回类型,参数列表和方法体等四个部分.</p><p>方法的定义如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符] [返回类型] 方法名 ([参数类型<span class="number">1</span> 参数名<span class="number">1</span>], [参数类型<span class="number">2</span> 参数名<span class="number">2</span>], ...) &#123;</span><br><span class="line">  <span class="comment">// 方法体</span></span><br><span class="line">  [<span class="keyword">return</span> 返回值;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li>访问修饰符是指该方法的可见性,例如public,private,protected或不写(default,也就是包级私有)</li><li>返回类型是指该方法返回的数据类型,如果该方法没有返回任何内容,则返回类型为void</li><li>方法名是指该方法的名称,必须以字母或下划线开头,并且不能使用保留关键字</li><li>参数列表是指在调用该方法时传入的参数类型和参数名,可以有多个,用逗号隔开.如果该方法不需要接收任何参数,可以把参数列表的括号省略掉</li><li>方法体是指该方法的具体实现,即对应的Java语句和语法</li><li>返回值是指该方法执行完返回的结果,可以是任意基本数据类型或对象引用类型.若该方法没有返回任何值,则可以省略return语句</li></ul><p>下面是一个简单的Java方法的示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line"><span class="comment">//加法方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> x + y;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例代码中,Calculator是一个类,其中包含一个add()方法,用于实现两个数的相加操作.</p><p>在该方法中,我们通过传入两个参数x和y来计算它们的和,并将结果返回.</p><p>当我们使用该方法时,只需要创建Calculator对象并调用add()方法即可完成相加操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Calculator</span> <span class="variable">calcutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> calcutor.add(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">// 调用add()方法,传入2和3作为参数,返回它们的和5</span></span><br></pre></td></tr></table></figure><p>在上面的代码中,首先用new运算符创建了一个Calculator对象,然后使用该对象的add(方法来计算2和3的和,并将结果赋给变量sum.</p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>在Java中,成员方法是定义在类中&#x2F;与特定对象相关联的方法,也被称为实例方法和对象方法.</p><p>它们可以访问并操作该类的属性和其他成员变量,这使得它们能够执行各种操作,并且每个对象都可以用自己的方法去调用这些方法.</p><p>成员方法必须在类内部声明,但可以通过创建类的对象来调用它们.在方法名称前面添加对象名称后,就可以通过对象调用该方法.</p><p>下面是一个代码实例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  创建Person对象并设置名字</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  获取该对象的名字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> person.getName();</span><br><span class="line">System.out.println(name);<span class="comment">//  输出&quot;John&quot;</span></span><br></pre></td></tr></table></figure><p>在这个代码中,我定义了一个Person类,其中包含了一个私有属性name和一个公共方法getName().这个方法返回对象的name属性值.创建了一个Person对象,并设置其name属性为”John”,然后使用该对象调用getName()方法来获取它的名字,并将结果打印输出到控制台上.</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>Java语言的构造方法是一种特殊的方法,用于在创建对象时为其初始化属性.</p><p>下面是一个简单的Java构造方法的实例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="comment">//  成员变量</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> displayInfo&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;姓名: &quot;</span> +　name + <span class="string">&quot;,年龄: &quot;</span> + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中,我定义了一个Person类,它有两个私有的成员变量name和age,以及一个公共的构造方法和一个显示信息的成员方法displayInfo().</p><p>在这个构造方法中,我们传入了两个参数name和age,并使用this关键字来引用当前对象,将传入的参数赋值给类中的成员变量name和age</p><p>当我们创建Person对象时,会自动调用该类的构造函数,例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;法外狂徒张三&quot;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>这样我们就创建了一个名为person1的Person对象,并将他的姓名初始化为”法外狂徒张三”,年龄为20岁.</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>Java中的局部变量是指在方法中或代码块(如for&#x2F;while等循环语句中)内部定义的变量,作用范围仅限于该方法或代码块之内.</p><p>与成员变量不同,局部变量具有更短的生命周期和作用范围,只在生命的方法或代码块中有效,出了该范围就无法访问.</p><p>Java的局部变量必须先声明然后才可以使用.声明时需要制定变量的类型,并且可以选择是否对其进行初始化赋值.如果没有进行初始化,则会自动赋默认值(数值对象为0,对象类型为null,布尔类型为false).</p><p>下面是一个简单的示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出局部变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a的值为：&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b的值为：&quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;str的值为：&quot;</span> + str);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 循环语句中的局部变量i</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;循环次数为：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>Java中的成员变量是指定义在类中,方法外部的变量,也成为实例变量或对象变量.</p><p>与局部变量不同,成员变量具有更唱的生命周期和作用范围,在整个类中都可以被使用.</p><p>Java中的成员变量可以分为<strong>静态变量</strong>和<strong>非静态变量</strong>两种类型:</p><h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><p>静态变量又称为类变量,它们属于整个类,而不是某个特定对象,被所有该类的成员所共享,只需在第一次使用之前初始化即可.</p><h4 id="非静态变量"><a href="#非静态变量" class="headerlink" title="非静态变量"></a>非静态变量</h4><p>非静态变量又称为实例变量,它们属于某个具体的对象,每个对象都有其独立的值,需要在创建对象的时候初始化</p><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><p>Java中有四种访问修饰符,分别是public,protected,default和private</p><ul><li>public：可以被任何类访问。</li><li>protected：只能被本类、同包以及其子类访问。</li><li>default(默认)：只能被本类和同包访问。</li><li>private：只能被本类访问。</li></ul><p>访问修饰符用于限制对类&#x2F;变量&#x2F;方法和构造方法的访问权限.</p><p>通过使用适当的修饰符,可以控制代码中各部分的可见性和封装性,从而更好的管理代码.</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//公共成员变量</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;<span class="comment">//受保护的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> married;<span class="comment">//私有成员变量</span></span><br><span class="line">    <span class="keyword">static</span> String country;<span class="comment">//静态成员变量</span></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age , <span class="type">boolean</span> married)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.married = warried;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公共方法,用于获取私有属性值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMarried</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> married;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公共静态方法,用于设置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCountry</span><span class="params">(String country)</span>&#123;</span><br><span class="line">        Person.country = country;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例代码中,我首先定义了一个Person类，并声明了四个成员变量name、age、married和country。其中，name是公共成员变量，可以被其他类直接访问；age是受保护的成员变量，只能在相同包内或继承该类的子类中被访问；married是私有成员变量，只能在本类中被访问；country是静态成员变量，属于整个类而不是某个特定对象，被所有该类的对象所共享。</p><p>我们还定义了一个构造方法用于初始化成员变量的值，以及一个公共方法isMarried用于返回私有成员变量married的值。同时也定义了一个公共静态方法setCountry，用于设置静态成员变量country的值。</p><p>在实际应用中，成员变量常常会搭配着成员方法一起使用，形成完整的面向对象编程模式。成员变量的使用需要注意数据的安全性和可维护性，通常会使用Java的封装特性进行保护。</p><h3 id="Java面向对象三大特性"><a href="#Java面向对象三大特性" class="headerlink" title="Java面向对象三大特性"></a><strong>Java面向对象三大特性</strong></h3><p>Java有三个基本特性：封装、继承和多态。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装是面向对象编程的一种重要特性,它将类的属性和方法进行隐藏,只提供公共接口给外部使用,这保证了数据的安全性和可维护性.</p><p>Java中封装可以通过关键字private,protected,public来控制成员变量和成员变量的访问级别.</p><p>下面是一个简单的Java封装的实例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="comment">//  私有属性</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  公共方法,用于获取私有属性值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  公共方法,用于设置私有属性值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Person类的示例代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person1.setAge(<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(person1.getName()+<span class="string">&quot;的年龄是: &quot;</span> + person1.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一段代码中,我定义了一个Person类(不知道这篇博客里定义了多少回哈哈哈),并将其属性name和age都声明为private(私有)类型,这意味着这两个属性只能在Person类内部使用,无法被外部直接访问.但是,我还定义了两个getter方法(getName和getAge)和两个setter方法(setName和setAge),这些方法都是public(公有)类型,可以被外部调用.由于这些方法不直接暴露类的私有属性,因此可以有效地实现对数据的封装.</p><p>在第二段代码中,我们创建了Person对象,通过setter方法设置了其name属性和age属性,并通过getter方法获取了这些属性.</p><p>由于这些方法是public类型,因此可以被外部类调用,但是由于封装的存在,Main无法直接访问Person的私有属性,从而保证了程序中数据的安全性.</p><h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><p>在Java中,继承是一个面向对象编程的基本特征,它允许我们创建一个<strong>新类</strong>,并且从一个或多个现有类中继承属性和方法.</p><p>新创建的子类(也称派生类)可以使用父类(超类或基类)中的所有公共和受保护的成员.</p><p>下面先介绍一下extends和implements这两个可以实现继承的Java关键字</p><h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h5><p>extends使得一个类可以从另一个类中获取属性和方法,并且可以扩展这些属性和方法来创建新的类.</p><p>当一个类通过关键字extends继承另一个类时,它被称为子类或派生类(derived class),被继承的类被称为父类或基类(base class).</p><p>子类继承了父类的所有非私有成员变量(字段)和方法,并且可以在其中添加自己的成员变量和方法.</p><p>**注:**在Java中,一个类只能继承一个直接的父类,但是可以通过多层继承的方式获得更多的属性和方法.同时如果一个类没有明确继承任何其他类,则默认继承Object类</p><h5 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h5><p>除了extends关键字之外,还有一个类似的关键字叫做implements.</p><p>implements关键字用于实现接口(inferface)</p><p>接口是一种纯抽象类,其中只包含方法的声明而没有实现.当一个类实现了某个接口时,它必须实现接口中声明的所有方法.通过实现接口,可以使得一个类具有特定的功能或行为.</p><p>**注:**一个类可以同时继承一个父类并实现多个接口,通过这种方式可以获得更丰富的属性和方法,并实现特定的功能和行为</p><p>下面是一个<strong>extends</strong>的简单示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The animal is eating.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The animal is sleeping.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> bark&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The dog is darking.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中,我定义了Animal类作为基类,其中包含了一些属性和方法.然后使用了关键字extends定义了一个子类Dog,并从Animal类中继承了其属性和方法.在这个例子中,Dog继承了name和age两个属性以及eat()和sleep()两个方法.</p><p><strong>注:</strong></p><ol><li>子类可以覆盖(重写)从父类那里继承过来的方法,在这种情况下,子类将使用自己的实现来替换父类的实现</li><li>父类的private属性和方法不能被子类直接访问和继承,但是protected属性和方法可以.</li><li>一个类只有一个直接父类,但是可以存在多级继承</li><li>在进行继承的时候必须遵循”is-a”原则.</li></ol><h3 id="is-a原则"><a href="#is-a原则" class="headerlink" title="is-a原则"></a>is-a原则</h3><p>又被叫做Liskov原则,是指子类必须能够替换掉他的父类,而不影响程序的正确性.</p><p>这个原则是针对继承关系的一个基本原则,它要求面向对象设计中保持一二执行和可靠性,并且确保派生类可以无缝地替换其基类</p><ol><li>子类必须拥有父类的所有公共方法和属性</li><li>子类可以增加自己的属性和方法,以扩展功能</li><li>子类不能删除父类的任何属性和方法</li><li>子类必须保持对父类行为的兼容性</li></ol><h3 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h3><p>Java的多态性是同一种行为或方法具有多个表现形式的能力.在Java中,多态性是通过继承和接口实现的.</p><p>当一个父类引用变量指向一个子类对象时,就发生了多态.</p><p>这意味着可以在运行时根据上下文自动选择正确的方法,而不需要手动判断对象类型并执行不同的方法.</p><p>具体来说,Java中的多态性体现在两个方面:方法重载和方法重写.</p><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载:"></a>方法重载:</h4><p>方法重载是指在同一个类中定义多个方法,让这些方法的名称相同,但参数列表不同,以便处理不同类情的输入.</p><p>根据参数列表不同,编译器在编译期间就可以区分这些方法,从而实现多态.</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> num1,<span class="type">double</span> num2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写:"></a>方法重写:</h4><p>方法重写是指子类重写其父类的方法,以便于根据子类的特定需求重新定义方法的行为.</p><p>该方法必须具有与父类方法相同的名称,返回类型和参数,但是子类可以重写该方法的实现.</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is making a sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is barking&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA的基本使用和Java语言&quot;&gt;&lt;a href=&quot;#IDEA的基本使用和Java语言&quot; class=&quot;headerlink&quot; title=&quot;IDEA的基本使用和Java语言&quot;&gt;&lt;/a&gt;IDEA的基本使用和Java语言&lt;/h1&gt;&lt;p&gt;当今时代，创意是无处不在的。</summary>
      
    
    
    
    
    <category term="BluemSun" scheme="http://example.com/tags/BluemSun/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2023/04/26/MySQL/"/>
    <id>http://example.com/2023/04/26/MySQL/</id>
    <published>2023-04-26T09:02:31.000Z</published>
    <updated>2023-05-11T00:25:42.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习MySQL语言"><a href="#学习MySQL语言" class="headerlink" title="学习MySQL语言"></a>学习MySQL语言</h1><h2 id="什么是MySQL"><a href="#什么是MySQL" class="headerlink" title="什么是MySQL"></a>什么是MySQL</h2><p>MySQL是一种关系型数据库管理系统，它使用SQL（结构化查询语言）来管理和操作数据。</p><h2 id="MySQL的基本语法"><a href="#MySQL的基本语法" class="headerlink" title="MySQL的基本语法"></a>MySQL的基本语法</h2><h3 id="连接到MySQL服务器"><a href="#连接到MySQL服务器" class="headerlink" title="连接到MySQL服务器"></a>连接到MySQL服务器</h3><p>要连接到MySQL服务器，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u username -p password -h hostname</span><br></pre></td></tr></table></figure><p>其中<code>username</code>是你的MySQL用户名，<code>password</code>是你的MySQL密码，<code>hostname</code>是你的MySQL服务器地址。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>要创建一个新的数据库，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE databasename;</span><br></pre></td></tr></table></figure><p>其中<code>databasename</code>是你想要创建的数据库名称。</p><h3 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h3><p>要在数据库中创建一个新的表格，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tablename (</span><br><span class="line">    column1 datatype,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    column3 datatype,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中<code>tablename</code>是你想要创建的表格名称，<code>column1</code>、<code>column2</code>、<code>column3</code>等是表格的列名，<code>datatype</code>是每个列的数据类型。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>要向表格中插入数据，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO tablename (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure><p>其中<code>tablename</code>是你要插入数据的表格名称，<code>column1</code>、<code>column2</code>、<code>column3</code>等是表格的列名，<code>value1</code>、<code>value2</code>、<code>value3</code>等是要插入的数据值。</p><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>要从表格中查询数据，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, column3, ... FROM tablename WHERE condition;</span><br></pre></td></tr></table></figure><p>其中<code>column1</code>、<code>column2</code>、<code>column3</code>等是你要查询的列名，<code>tablename</code>是你要查询的表格名称，<code>condition</code>是一个条件语句，用于筛选出符合条件的行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MySQL是一种非常强大的关系型数据库管理系统，掌握其基本语法对于进行数据处理和数据分析具有重要意义。我们需要了解连接到MySQL服务器、创建数据库、创建表格、插入数据和查询数据等基本操作，并且不断加深对MySQL的理解和应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习MySQL语言&quot;&gt;&lt;a href=&quot;#学习MySQL语言&quot; class=&quot;headerlink&quot; title=&quot;学习MySQL语言&quot;&gt;&lt;/a&gt;学习MySQL语言&lt;/h1&gt;&lt;h2 id=&quot;什么是MySQL&quot;&gt;&lt;a href=&quot;#什么是MySQL&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="BluemSun" scheme="http://example.com/tags/BluemSun/"/>
    
  </entry>
  
  <entry>
    <title>Hash-Table</title>
    <link href="http://example.com/2023/04/24/Hash-Table/"/>
    <id>http://example.com/2023/04/24/Hash-Table/</id>
    <published>2023-04-24T11:54:43.000Z</published>
    <updated>2023-05-11T15:26:18.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希表学习"><a href="#哈希表学习" class="headerlink" title="哈希表学习"></a>哈希表学习</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>哈希表也叫散列表,是一种<strong>数据结构</strong>,它使用哈希函数将键映射到存储桶或者槽中的位置</p><p>常用于实现映射,集合和关联数组等</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>无论哈希表中有多少条数据,插入和查找的时间复杂度都是为O(1),因此哈希表的查找速度非常快,因此哈希表的查找速度非常快</p><p>而且哈希表有快速的插入和删除操作,适用于大数据处理</p><p>还可以用自定义的哈希函数优化</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>元素没有特定顺序,无法进行有序遍历</p><p>散列冲突难以处理</p><p>哈希表是基于数组的,数组创建后的扩容成本比较高,所以当哈希表被填满时,性能下降比较严重</p><h2 id="哈希表的转换思想"><a href="#哈希表的转换思想" class="headerlink" title="哈希表的转换思想"></a>哈希表的转换思想</h2><p>将<strong>键</strong>或者<strong>关键字</strong>转换成数组下标</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面是一个简单的哈希表c++代码示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::unordered_map&lt;std::string, <span class="type">int</span>&gt; myMap;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//向哈希表中添加元素</span></span><br><span class="line">    myMap.<span class="built_in">insert</span>(&#123;<span class="string">&quot;apple&quot;</span>, <span class="number">10</span>&#125;);</span><br><span class="line">    myMap.<span class="built_in">insert</span>(&#123;<span class="string">&quot;orange&quot;</span>, <span class="number">20</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问哈希表中的元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;apple: &quot;</span> &lt;&lt; myMap[<span class="string">&quot;apple&quot;</span>] &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;orange: &quot;</span> &lt;&lt; myMap[<span class="string">&quot;orange&quot;</span>] &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除哈希表中的元素</span></span><br><span class="line">    myMap.<span class="built_in">erase</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;哈希表学习&quot;&gt;&lt;a href=&quot;#哈希表学习&quot; class=&quot;headerlink&quot; title=&quot;哈希表学习&quot;&gt;&lt;/a&gt;哈希表学习&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Introduction</title>
    <link href="http://example.com/2023/04/24/Introduction/"/>
    <id>http://example.com/2023/04/24/Introduction/</id>
    <published>2023-04-24T11:12:09.000Z</published>
    <updated>2023-04-26T11:41:19.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到琦煜老师的博客"><a href="#欢迎来到琦煜老师的博客" class="headerlink" title="欢迎来到琦煜老师的博客"></a>欢迎来到琦煜老师的博客</h1><h2 id="这里是琦煜老师正在学习的内容"><a href="#这里是琦煜老师正在学习的内容" class="headerlink" title="这里是琦煜老师正在学习的内容"></a>这里是琦煜老师正在学习的内容</h2><ul><li><strong>算法</strong></li><li><strong>Java</strong></li><li><strong>Arduino</strong></li></ul><h2 id="这里是打算开发的内容"><a href="#这里是打算开发的内容" class="headerlink" title="这里是打算开发的内容"></a>这里是打算开发的内容</h2><ul><li><strong>教技答疑</strong></li><li><strong>NENU OJ题解</strong></li><li><strong>后端程序</strong></li></ul><h2 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h2><p>网页(4.27交)</p><p>离散作业(5.8)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欢迎来到琦煜老师的博客&quot;&gt;&lt;a href=&quot;#欢迎来到琦煜老师的博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到琦煜老师的博客&quot;&gt;&lt;/a&gt;欢迎来到琦煜老师的博客&lt;/h1&gt;&lt;h2 id=&quot;这里是琦煜老师正在学习的内容&quot;&gt;&lt;a href=&quot;#这里是</summary>
      
    
    
    
    
    <category term="Introduction" scheme="http://example.com/tags/Introduction/"/>
    
  </entry>
  
</feed>
